package com.orchestrationexample.registerinfoservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.3
 * 2012-02-04T21:34:40.489+01:00
 * Generated source version: 2.4.3
 * 
 */
@WebServiceClient(name = "RegisterInfoService", 
                  wsdlLocation = "file:/M:/sonic/Workbench8.0/workspace/register-info-service/wsdl/RegisterInfoService.wsdl",
                  targetNamespace = "http://registerinfoservice.orchestrationexample.com/") 
public class RegisterInfoService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://registerinfoservice.orchestrationexample.com/", "RegisterInfoService");
    public final static QName RegisterInfoServicePort = new QName("http://registerinfoservice.orchestrationexample.com/", "RegisterInfoServicePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/M:/sonic/Workbench8.0/workspace/register-info-service/wsdl/RegisterInfoService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RegisterInfoService_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/M:/sonic/Workbench8.0/workspace/register-info-service/wsdl/RegisterInfoService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RegisterInfoService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RegisterInfoService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RegisterInfoService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns RegisterInfoService
     */
    @WebEndpoint(name = "RegisterInfoServicePort")
    public RegisterInfoService getRegisterInfoServicePort() {
        return super.getPort(RegisterInfoServicePort, RegisterInfoService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RegisterInfoService
     */
    @WebEndpoint(name = "RegisterInfoServicePort")
    public RegisterInfoService getRegisterInfoServicePort(WebServiceFeature... features) {
        return super.getPort(RegisterInfoServicePort, RegisterInfoService.class, features);
    }

}
